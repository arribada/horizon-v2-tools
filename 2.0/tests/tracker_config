#!/usr/bin/python2.7

import argparse
import logging
import sys
import json
from arribada_tools import backend, interface, config, __version__

parser = argparse.ArgumentParser()
parser.add_argument('--ble_addr', dest='bluetooth_addr', required=False)
parser.add_argument('--debug', action='store_true', required=False)
parser.add_argument('--write', type=argparse.FileType('r'), required=False)
parser.add_argument('--read', type=argparse.FileType('w'), required=False)
parser.add_argument('--read_log', type=argparse.FileType('wb'), required=False)
parser.add_argument('--battery', action='store_true', required=False)
parser.add_argument('--status', action='store_true', required=False)
parser.add_argument('--save', action='store_true', required=False)
parser.add_argument('--restore', action='store_true', required=False)
parser.add_argument('--erase', action='store_true', required=False)
parser.add_argument('--erase_log', action='store_true', required=False)
parser.add_argument('--create_log', required=False)
parser.add_argument('--reset', required=False)
parser.add_argument('--protect', action='store_true', required=False)
parser.add_argument('--unprotect', action='store_true', required=False)
parser.add_argument('--set_date_time', required=False)
parser.add_argument('--get_date_time', action='store_true', required=False)
parser.add_argument('--firmware_type', required=False)
parser.add_argument('--firmware', type=argparse.FileType('rb'), required=False)
parser.add_argument('--version', action='store_true', required=False)

args = parser.parse_args()
comms_backend = None

if not any(vars(args).values()):
    parser.print_help()
    sys.exit()

if args.version:
    print 'Version:', __version__
    sys.exit()
        
try:

    if args.debug:
        logging.basicConfig(format='%(asctime)s\t%(module)s\t%(levelname)s\t%(message)s', level=logging.DEBUG)
    else:
        logging.basicConfig(format='%(asctime)s\t%(module)s\t%(levelname)s\t%(message)s', level=logging.WARN)

    if args.bluetooth_addr:
        comms_backend = backend.BackendBluetooth(dev_addr=args.bluetooth_addr)
    else:
        comms_backend = backend.BackendUsb()
    
    cfg = interface.ConfigInterface(comms_backend)
    
    if args.read_log:
        args.read_log.write(cfg.read_log_file(0, 0))
    
    if args.erase_log:
        cfg.erase_log_file()
    
    if args.create_log:
        cfg.create_log_file(args.create_log)
    
    if args.restore:
        cfg.restore_configuration()
    
    if args.unprotect:
        cfg.unprotect_configuration()
    
    if args.erase:
        cfg.erase_configuration()
    
    if args.write:
        cfg.write_json_configuration(args.write.read())
    
    if args.set_date_time:
        cfg.write_json_configuration('{"rtc": { "dateTime": "%s"}}' % args.setdatetime)
    
    if args.get_date_time:
        print cfg.read_json_configuration(tag=config.ConfigItem_RTC_CurrentDateTime.tag)
    
    if args.save:
        cfg.save_configuration()
    
    if args.read:
        args.read.write(cfg.read_json_configuration())
    
    if args.protect:
        cfg.protect_configuration()
    
    if args.status:
        print json.dumps(cfg.get_status())
    
    if args.battery:
        print json.dumps(cfg.get_battery_status())
    
    if args.reset:
        cfg.reset(args.reset)

    if args.firmware_type and args.firmware:
        cfg.fw_upgrade(args.firmware_type, args.firmware.read())
except:
    print "Unexpected error: %s" % str(sys.exc_info())

if comms_backend:
    comms_backend.cleanup()

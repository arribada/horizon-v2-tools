Index: test/gtest-port_test.cc
===================================================================
--- test/gtest-port_test.cc	(revision 629)
+++ test/gtest-port_test.cc	(working copy)
@@ -304,7 +304,7 @@
   EXPECT_EQ("unknown file", FormatCompilerIndependentFileLocation(NULL, -1));
 }
 
-#if GTEST_OS_MAC || GTEST_OS_QNX
+#if GTEST_OS_MAC || GTEST_OS_QNX || GTEST_OS_LINUX
 void* ThreadFunc(void* data) {
   pthread_mutex_t* mutex = static_cast<pthread_mutex_t*>(data);
   pthread_mutex_lock(mutex);
@@ -334,11 +334,11 @@
   void* dummy;
   ASSERT_EQ(0, pthread_join(thread_id, &dummy));
 
-# if GTEST_OS_MAC
+# if GTEST_OS_MAC || GTEST_OS_LINUX
 
-  // MacOS X may not immediately report the updated thread count after
-  // joining a thread, causing flakiness in this test. To counter that, we
-  // wait for up to .5 seconds for the OS to report the correct value.
+  // MacOS X and Linux may not immediately report the updated thread count
+  // after joining a thread, causing flakiness in this test. To counter that,
+  // we wait for up to .5 seconds for the OS to report the correct value.
   for (int i = 0; i < 5; ++i) {
     if (GetThreadCount() == 1)
       break;
@@ -346,7 +346,7 @@
     SleepMilliseconds(100);
   }
 
-# endif  // GTEST_OS_MAC
+# endif  // GTEST_OS_MAC || GTEST_OS_LINUX
 
   EXPECT_EQ(1U, GetThreadCount());
   pthread_mutex_destroy(&mutex);
@@ -355,7 +355,7 @@
 TEST(GetThreadCountTest, ReturnsZeroWhenUnableToCountThreads) {
   EXPECT_EQ(0U, GetThreadCount());
 }
-#endif  // GTEST_OS_MAC || GTEST_OS_QNX
+#endif  // GTEST_OS_MAC || GTEST_OS_QNX || GTEST_OS_LINUX
 
 TEST(GtestCheckDeathTest, DiesWithCorrectOutputOnFailure) {
   const bool a_false_condition = false;
Index: src/gtest-port.cc
===================================================================
--- src/gtest-port.cc	(revision 629)
+++ src/gtest-port.cc	(working copy)
@@ -56,6 +56,10 @@
 # include <sys/procfs.h>
 #endif  // GTEST_OS_QNX
 
+#if GTEST_OS_LINUX
+# include <dirent.h>
+#endif  // GTEST_OS_LINUX
+
 #include "gtest/gtest-spi.h"
 #include "gtest/gtest-message.h"
 #include "gtest/internal/gtest-internal.h"
@@ -123,6 +127,22 @@
   }
 }
 
+#elif GTEST_OS_LINUX
+
+// Returns the number of threads running in the process, or 0 to indicate that
+// we cannot detect it.
+size_t GetThreadCount() {
+  size_t thread_count = 0;
+  if (DIR *dir = opendir("/proc/self/task")) {
+    while (dirent *entry = readdir(dir)) {
+      if (strcmp(entry->d_name, ".") != 0 && strcmp(entry->d_name, "..") != 0)
+        ++thread_count;
+    }
+    closedir(dir);
+  }
+  return thread_count;
+}
+
 #else
 
 size_t GetThreadCount() {
